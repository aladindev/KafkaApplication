
kafka를 중앙에 배치함으로써 소스 어플리케이션과 타깃 어플리케이션 사이의
의존드를 최소화하여 커플링을 '완화' 할 수 있다.

기존에 1:1 매칭으로 개발하고 운영하던 데이터 파이프라인은
커플링으로 인해 한쪽의 이슈가 다른 한쪽의 어플리케이션에 영향을 미치곤 했지만
카프카는 이러한 의존도를 낮춰줄 수 있었다.

이제 소스 어플리케이션에서 생성되는 데이터는 어느 타깃 어플리케이션으로
보낼 것인지 고민하지 않고 카프카로 넣으면 된다.

카프카 내부에 데이터가 저장되는 파티션의 동작은
FIFO(First In First Out) 방식의 큐 자료구조와
유사하다.

큐에 데이터를 보내는 것이 '프로듀서(Producer)'
큐에서 데이터를 가져가는 것이 '컨슈머(Consumer)' 이다!

카프카를 통해 전달할 수 있는 데이터 포맷은 사실상 제한이 없다.
직렬화, 역직렬화를 통해 ByteArray로 통신하기 때문에
자바에서 선언 가능한 모든 객체를 지원한다!

영속성이란,
데이터를 생성한 프로그램이 종료되더라도 사라지지 않은 데이터의 특성
카프카는 다른 메시징 플랫폼과 다르게 전송받은 데이터를
메모리에 저장하지 않고 파일 시스템에 저장한다.

고가용성
3개 이상의 서버들로 운영되는 카프카 클러스터는 일부 서버에
장애가 발생하더라도 무중단으로 안전하고 지속적으로 데이터를 처리할 수 있다.
클러스터로 이루어진 카프카는 데이터의 복제(replication)를 통해 고가용성의
특징을 가지게 되었다.

프로듀서로 전송받은 데이터를 여러 브로커 중 1대의 브로커에만
저장하는 것이 아니라 또 다른 브로커에도 저장하는 것이다.
한 브로커에 장애가 발생하더라도 복제된 데이터가 나머지 브로커에
저장되어 있으므로 저장된 데이터를 기준으로 지속적으로 데이터 처리가 가능한 것이다.
이에 더하여 서버를 직접 운영하는 온프레미스(on-premise) 환경의 서버 랙 또는
퍼블릭 클라우드의 리전 단위 장애에도 데이터를 안전하게 복제할 수 있는
브로커 옵션들이 준비되어 있다.

카프카 클러스터를 1, 2대가 아닌 3대 이상의 브로커들로 구성해야 하는 이유
카프카 클러스터를 구축할 때 브로커 개수의 제한은 없지만, 안전하게 운영하기 위해
최소 3대 이상의 브로커로 클러스터를 구성할 것을 추천한다.
