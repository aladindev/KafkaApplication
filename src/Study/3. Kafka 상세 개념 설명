1. ISR(In-Sync-Replicas)
ISR은 리더 파티션과 팔로워 파티션이 모두 싱크가 된 상태를 뜻한다.


2. Kafka Producer
acks option 0, 1, all(또는 -1)의 값을 가질 수 있다.
acks = 0
  - 프로듀서가 리더 파티션으로 데이터를 전송했을 때 리더 파티션으로
    데이터가 저장되었는지 확인하지 않는다는 뜻.
    프로듀서가 데이터를 토픽으로 전송함과 동시에 저장되었다고 판단하기 때문에
    몇 번 옵셋으로 적재되었는지 확인하지 않고 다음 데이터를 전송한다.
    따라서 전송 속도는 acks를 1또는 all로 설정했을 때보다 훨씬 빠르다.

acks = 1
  - 리더 파티션에 데이터가 적재될 때까지 기다린 뒤 응답 값을 받기 때문에
    0으로 설정하는 것에 비해 젅송 속도가 느리다.
    그렇다고 하더라도 데이터는 유실될 수 있다.
    왜냐하면 복제 개수를 2이상으로 운영할 경우 리더 파티션에
    적재가 완료되어도 팔로워 파티션에는 아직 데이터가
    동기화되지 않을 수 있는데, 팔로워 파티션이 데이터를 복제하기 직전에
    리더 파티션이 있는 브로커에 장애가 발생되면 동기화되지 못한 데이터 일부가 유실될 수 있다.

acks=all 또는 acks= -1
  - 프로듀서는 보낸 데이터가 리더 파티션과 팔로워 파티션에
    모두 정상적으로 적재되었는지 확인한다. 리더 파티션뿐만 아니라
    팔로워 파티션까지 데이터가 적재되었는지 확인하기 때문에
    느리지만 일부 브로커에 장애가 발생하더라도 프로듀서는 안전하게 데이터를 유실 없이 전송하고
    적재할 수 있다.


멱등성(Idempotence) Producer
멱등성이란 여러 번 연산을 수행하더라도 동일한 결과를 나타내는 것을 뜻한다.
멱등성 프로듀서는 동일한 데이터를 여러 번 전송하더라도 카프카 클러스터에 단 한 번만 저장됨을 의미한다.

트랜잭션(Transaction) Producer
트랜잭션 프로듀서는 다수의 파티션에 데이터를 저장할 경우 모든 데이터에 대해
동일한 원자성(atomic)을 만족시키기 위해 사용된다.
원장성 만족이란 다수의 데이터를 동일 트랜잭션으로 묶음으로써
전체 데이터를 처리하거나 전체 데이터를 처리하지 않도록 하는 것을 의미한다.

Kafka Consumer
Multi Thread Consumer
 카프카는 처리량을 늘리기 위해 파티션과 컨슈머 개수를 늘려서 운영할 수 있다.
 파티션을 여러 개로 운영하는 경우 데이터를 병렬처리하기 위해서 파티션 개수와
 컨슈머 개수를 동일하게 맞추는 것이 가장 좋은 방법이다.

Kafka Consumer Multi-Worker Thread
멀티 스레드를 생성하는 ExecutorService 자바 라이브러리를 사용
